using System.Linq;
using System.Threading.Tasks;
using Knyaz.Optimus;
using Knyaz.Optimus.Dom.Elements;
using Knyaz.Optimus.TestingTools;

namespace OptimusSamples
{
	class Program
	{
		static void Main(string[] args)
		{
			OpenWiki().Wait();
			GetHtml5ScoreTest().Wait();
			SearchWithYandex().Wait(); //todo: fix
			DomManipulation().Wait();
			ResponseStatus().Wait();
		}

		/// <summary>
		/// Very simple sample that shows how to get page html.
		/// </summary>
		/// <returns></returns>
		static async Task OpenWiki()
		{
			var engine = new Engine();
			var page = await engine.OpenUrl("https://en.wikipedia.org/wiki/%22Hello,_World!%22_program");
			System.Console.WriteLine("Content is: " + page.Document.QuerySelector("#bodyContent p").TextContent);
		}

		/// <summary>
		/// The sample shows how to wait for a content that generated by JavaScript.
		/// </summary>
		/// <returns></returns>
		static async Task GetHtml5ScoreTest()
		{
			var page = await new Engine().OpenUrl("https://html5test.com");
			
			//Wait until page's javascript code finishes the test of browser then get DOM element with score value.
			var tagWithValue = page.Document.WaitSelector("#score strong").First();

			System.Console.WriteLine("Score: " + tagWithValue.InnerHTML);
		}

		/// <summary>
		/// The sample demonstrates how to fill the input form and work with results.
		/// </summary>
		/// <returns></returns>
		static async Task SearchWithYandex()
		{
			var engine = new Engine();
			var page = await engine.OpenUrl("http://ya.ru");
			var input = page.Document.WaitId("text") as HtmlInputElement;
			var button = page.Document.WaitSelector("button").First() as HtmlButtonElement;

			input.EnterText("Knyaz.Optimus");
			button.Click();

			//First search result
			var link = page.Document.WaitSelector("li[data-cid=0]").First();
			System.Console.WriteLine(link.TextContent);
		}

		/// <summary>
		/// The sample demonstrates that that all api is available to C#, which is available for JS. 
		/// </summary>
		/// <returns></returns>
		static async Task DomManipulation()
		{
			var engine = new Engine();
			//you can open not only http links
			var page = await engine.OpenUrl("data:text/html,<body>Hello!</body>");
			System.Console.WriteLine($"Initial body content is: {page.Document.Body.TextContent}");

			
			//Create new DOM element and add it to the document's body.
			var paragraph = page.Document.CreateElement("p");
			paragraph.TextContent = "DOM manipulation is easy!";
			page.Document.Body.AppendChild(paragraph);
			
			System.Console.WriteLine($"Modified body content is: {page.Document.Body.TextContent}");
		}

		/// <summary>
		/// The sample demonstrates how to check the status of the response for the page load request.  
		/// </summary>
		/// <returns></returns>
		static async Task ResponseStatus()
		{
			var engine = new Engine();
			
			var page = await engine.OpenUrl("http://google.com/unknownfolder") as HttpPage;
			
			System.Console.WriteLine($"Status code is: {page.HttpStatusCode}");
		}
	}
}